import numpy as np
import torch

from dl2021.torch.module.unet import UNet3D
from dpipe.train.policy import Schedule
from dpipe.torch.functional import weighted_cross_entropy_with_logits
from dpipe.predict import add_extract_dims, divisible_shape
from dpipe.torch import inference_step
from dl2021.batch_iter import slicewise, SPATIAL_DIMS
from dpipe.im.shape_ops import pad
from dpipe.predict.functional import preprocess
from dpipe.predict.shape import patches_grid


# loss
criterion = weighted_cross_entropy_with_logits

# model
n_filters = 16
architecture = UNet3D(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n_filters_init=n_filters)

x_patch_size = y_patch_size = np.array([256, 256, 256])
batch_size = 16

# optimizer
batches_per_epoch = 100
n_epochs = 100

# optimizer
lr_init = 1e-3
lr = Schedule(initial=lr_init, epoch2value_multiplier={80: 0.1, })

optimizer = torch.optim.SGD(
    architecture.parameters(),
    lr=lr_init,
    momentum=0.9,
    nesterov=True,
    weight_decay=0
)

pred_patch_size = np.array([32,]*3)
pred_patch_stride = np.array([16,]*3)

# predict
@add_extract_dims(2)
@patches_grid(pred_patch_size, pred_patch_stride, axis=SPATIAL_DIMS)
@divisible_shape(divisor=[8]*3 , padding_values=np.min, axis=SPATIAL_DIMS)

def predict(image):
    return inference_step(image, architecture=architecture, activation=torch.sigmoid)
