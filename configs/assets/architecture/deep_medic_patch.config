import numpy as np
import torch

from dl2021.torch.module.deep_medic import DeepMedic
from dpipe.train.policy import Schedule
from dpipe.torch.functional import weighted_cross_entropy_with_logits
from dpipe.predict import add_extract_dims
from dpipe.torch import inference_step
from dl2021.batch_iter import SPATIAL_DIMS
from dl2021.utils import patches_grid_dm


# loss
criterion = weighted_cross_entropy_with_logits

# model
n1 = 30
n2 = 40
n3 = 50
up = True
architecture = DeepMedic(n_chans_in=n_chans_in, n_chans_out=n_chans_out, n1=n1, n2=n2, n3=n3, up=up)

x_patch_size = np.array([57, 57, 57])
y_patch_size = np.array([9, 9, 9])
batch_size = 16

# optimizer
batches_per_epoch = 100
n_epochs = 100

# optimizer
lr_init = 1e-3
lr = Schedule(initial=lr_init, epoch2value_multiplier={80: 0.1, })

optimizer = torch.optim.SGD(
    architecture.parameters(),
    lr=lr_init,
    momentum=0.9,
    nesterov=True,
    weight_decay=0
)

pred_patch_size = np.array([66, 66, 48])
pred_patch_stride = np.array([33, 33, 24])


# predict
@add_extract_dims(2)
@patches_grid_dm(pred_patch_size, pred_patch_stride, axis=SPATIAL_DIMS)
def predict(image):
    return inference_step(image, architecture=architecture, activation=torch.sigmoid)
